
import Footer from "../Components/Footer/Footer";
import ProjectTitle from "../Components/ProjectTitle/ProjectTitle";
import LeftBanner from "../Components/LeftBanner/LeftBanner";
import RightBanner from "../Components/RightBanner/RightBanner";
import ToolsBar from "../Components/ToolsBar/ToolsBar";

const CompilerPage = () => {
  return (
    <div className="w-screen overflow-hidden">
      <div className="max-w-[1366px] min-w[1365px] m-auto">
        
        <ProjectTitle
          title="SIC/XE Compiler"
          subtitle="Build with ANTLR tool (ANother Tool for Language Recognition)"
        />
        <div className="w-5/6 m-auto lg:mt-32">
          <LeftBanner
            description="
                Includes a source code editor with options to create new files,
                open, save and save as. Your source code is saved as (.xe)
                "
            image="/img/asm6.png"
          />
          <RightBanner
            description="
                When the code is assembled it generates a table with relevant data such as 
                program counter, addressing modes, instruction format, etc.
                This data generated allows you to see memory usage of a program.
                "
            image="/img/asm3.png"
          />
          <LeftBanner
            description="
                The language for SIC/XE architecture supports program blocks, what in a 
                high level language we call 'functions', these are also generated after 
                analyzing the source code
                "
            image="/img/asm4.png"
          />
          <RightBanner
            description="
                This section shows the errors generated and the result of assembly the source code
                which is hex code combined with special flags. This code is generated by the Linker and is
                known as object code.
                "
            image="/img/asm5.png"
          />

          <LeftBanner
            description="
                The object code can be loaded to emulate memory usage. if there were errors in 
                the assembly process, the loader stops when it finds the first.
                "
            image="/img/linker.png"
          />
        </div> 
        <ToolsBar title="Build with" skills={['C#', '.NET Framework v4.7.2', 'Antlr4.CodeGenerator.4.6.6', 'Antlr4.Runtime', 'FastColoredTextBox', 'Visual Studio']}/>       
        <Footer />
      </div>
    </div>
  );
};
export default CompilerPage;
